% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/complexity.R
\name{quantify_complexity}
\alias{quantify_complexity}
\title{Complexity of an image}
\usage{
quantify_complexity(imgfile, rotate = FALSE)
}
\arguments{
\item{imgfile}{Either a character string containing the
file name of the image (or URL) or an 3-dimensional
array of numeric values representing the pre-loaded
image.}

\item{rotate}{logical. Should the compressed file size of
the rotated image also be computed? (see details)}
}
\value{
a list of numeric values: compressed file size,
  original file size, ratio of compressed / original
  file size (i.e., the compression rate)
}
\description{
\code{quantify_complexity} returns the complexity of an
image as the size of the zip-compressed image file.
}
\details{
The function returns the visual complexity of an
  image. Visual complexity is calculated as the size of
  the zip-compressed image file. Preferably, the input is
  an uncompressed image file. If the input image is not
  an uncompressed \code{.bmp} file, the function tries to
  create an uncompressed version of the image.

  The function takes the file path of an image file (or URL) or a
  pre-loaded image as input argument (\code{imgfile}) and
  returns the file size of the zip-compressed image file.
  Additionally, the uncompressed file size and the
  compression rate are returned. Note that permission to
  read and write files in the specified directory path /
  working directory is needed for this function to work
  properly.

  The zip compression algorithm works line by line and
  hence does not depict horizontal and vertical
  redundancies equally (see Example). Thus, the function
  includes an optional \code{rotate} parameter (default:
  \code{FALSE}). Setting this parameter to \code{TRUE}
  has the following effects: first, the image is rotated
  by 90 degrees. Second, the rotated image is written in
  the working directory and a zip-compressed version is
  created. Finally, the complexity of the image is
  computed as the minimum of the original image's
  file size and the file size of the rotated image. All
  files that are created while the function runs are
  automatically deleted once the complexity score is
  calculated.

  As \code{R}'s built-in \code{bmp} device creates (a)
  indexed instead of True Color images and (b) creates
  files with different file sizes depending on the
  operating system, the function relies on the
  \code{magick} package to write (and read) images.
}
\examples{
# Example image with high complexity: img_trees
#
# display image
grid::grid.raster(img_trees)
# get complexity
quantify_complexity(img_trees)

# Example image with low complexity: img_sky
#
# display image
grid::grid.raster(img_sky)
# get complexity
quantify_complexity(img_sky)

}
\references{
Donderi, D. C. (2006). Visual complexity: A
  Review. \emph{Psychological Bulletin}, \emph{132},
  73--97.
  doi:\href{https://doi.org/10.1037/0033-2909.132.1.73}{10.1037/0033-2909.132.1.73}

Forsythe, A., Nadal, M., Sheehy, N.,
  Cela-Conde, C. J., & Sawey, M. (2011). Predicting
  Beauty: Fractal Dimension and Visual Complexity in Art.
  \emph{British Journal of Psychology}, \emph{102},
  49--70.
  doi:\href{https://doi.org/10.1348/000712610X498958}{10.1348/000712610X498958}
}
\seealso{
\code{\link{quantify_symmetry}},
  \code{\link{quantify_contrast}},
  \code{\link{quantify_typicality}},
  \code{\link{quantify_self_similarity}}
}

