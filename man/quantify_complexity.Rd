% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/complexity.R
\name{quantify_complexity}
\alias{quantify_complexity}
\title{Complexity of an image}
\usage{
quantify_complexity(imgfile, rotate = FALSE)
}
\arguments{
\item{imgfile}{A character string containing the file name of the image or an array or a matrix of numeric or integer values representing the pre-loaded image.}

\item{rotate}{logical. Should the compressed filesize of
the rotated image also be computed? (see details)}
}
\value{
a list of numeric values: compressed filesize,
  original filesize, ratio of compressed / original
  filesize (i.e., the compression rate)
}
\description{
\code{quantify_complexity} returns the complexity of an
image as the size of the zip-compressed image file.
Supported images types are \code{.bmp}, \code{.png},
\code{.jpg}, and \code{.jpeg}.
}
\details{
The function returns the visual complexity of an
  image. Visual complexity is calculated as the size of
  the zip-compressed image file. Preferably, the input
  is an uncompressed image file. If the input image is not an
  uncompressed \code{.bmp} file, the function tries to
  create an uncompressed version of the image.

  The function takes the file path of an image file or a pre-loaded image as input argument (\code{imgfile}) and returns
  the filesize of the zip-compressed image file.
  Additionally, the uncompressed filesize and the
  compression rate are returned. Note that permission to
  read and write files in the specified directory path / working directory is
  needed for this function to work properly.

  The zip compression algorithm works line by line and
  hence does not depict horizontal and vertical
  redundancies equally (see Example 1). Thus, the function includes an
  optional \code{rotate} parameter (default:
  \code{FALSE}). Setting this parameter to \code{TRUE}
  has the following effects: first, the image is loaded
  via the \code{readbitmap} package (if \code{imgfile} is
  not a pre-loaded image). Second, the image is
  rotated by 90 degrees. Third, the rotated image is
  written in the same directory as the input file (or the working directory) and a
  zip-compressed version is created. Finally, the
  complexity of the image is copmuted as the minimum of
  the original image's filesize and the filesize of the
  rotated image. All files that are created while the
  function runs are automatically deleted once the
  complexity score is calculated.

  In the current version, only \code{.bmp}, \code{.png},
  \code{.jpg}, and \code{.jpeg} images are supported.
}
\examples{
# Example 1: pre-loaded image as input
#
# create sample image
img <- matrix(0, nrow = 500, ncol = 500)
img[, 201:300] <- 1

# get complexity
quantify_complexity(img)
quantify_complexity(img, rotate = TRUE) # rotated file smaller (i.e., zip works line by line)


# Example 2: image path as input
#
# Download Lena sample image (see http://eeweb.poly.edu/~yao/EL5123/SampleData.html)
download.file("http://eeweb.poly.edu/~yao/EL5123/image/lena_gray.bmp",
   "Lena.bmp", mode = "wb")

# get complexity
quantify_complexity("Lena.bmp")

# get complexity (including rotated version)
quantify_complexity("Lena.bmp", rotate = TRUE)

# compute simplicity score
lena_results <- quantify_complexity("Lena.bmp", rotate = TRUE)
lena_results$original / lena_results$compressed # simplicity ratio

# delete image of Lena
file.remove("Lena.bmp")

}
\references{
Donderi, D. C. (2006). Visual complexity: A
  Review. \emph{Psychological Bulletin}, \emph{132},
  73--97.
  doi:\href{https://doi.org/10.1037/0033-2909.132.1.73}{10.1037/0033-2909.132.1.73}

Forsythe, A., Nadal, M., Sheehy, N.,
  Cela-Conde, C. J., & Sawey, M. (2011). Predicting
  Beauty: Fractal Dimension and Visual Complexity in Art.
  \emph{British Journal of Psychology}, \emph{102},
  49--70.
  doi:\href{https://doi.org/10.1348/000712610X498958}{10.1348/000712610X498958}
}
\seealso{
\code{\link{quantify_symmetry}},
  \code{\link{quantify_contrast}},
  \code{\link{quantify_typicality}},
  \code{\link{quantify_self_similarity}}
}

